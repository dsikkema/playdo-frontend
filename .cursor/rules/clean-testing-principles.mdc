---
description:
globs:
alwaysApply: false
---
# Clean Testing Principles

## Key Guidelines

1. **Keep Application Code Clean**
   - Never add parameters, properties, or methods to application code solely for testing
   - Application code should only contain what's needed for production

2. **Testing Private Functionality**
   - If you need to test private functionality, consider if your design needs improvement
   - Extract private functionality into separate, testable modules when appropriate
   - Use dependency injection rather than reflection to access internals

3. **Test Structure**
   - Test public interfaces and outcomes, not implementation details
   - Mock external dependencies, not the component under test
   - Use proper testing patterns like Arrange-Act-Assert
   - Keep test setup minimal and focused on the specific test case

4. **Preferred Testing Approaches**
   - Use constructor/method parameter injection for dependencies
   - Create test-specific subclasses only in test files, not in application code
   - Use test doubles (mocks, stubs) for external dependencies
   - Prefer higher-level integration tests for complex interactions

5. **Avoid at All Costs**
   - Adding optional parameters that are only used in tests
   - Using reflection or direct access to private fields/methods
   - Modifying application code solely to make it testable
   - Complex test utilities that make tests harder to understand

## Examples

###  Bad Practice: Test-only parameters
```ts
// Bad: Adding optional parameters just for testing
interface UserService {
  getUser(id: string, testOnly?: boolean): User;
}

// Bad: Using reflection to access private fields
test('private counter increments', () => {
  const instance = new Counter();
  const privateField = Object.getOwnPropertyDescriptor(
    Object.getPrototypeOf(instance), '_count'
  );
  expect(privateField.get.call(instance)).toBe(0);
});
```

###  Good Practice: Clean interfaces and public behavior
```ts
// Good: Clean interface without test-only parameters
interface UserService {
  getUser(id: string): User;
}

// Good: Testing public behavior, not implementation details
test('counter increments', () => {
  const counter = new Counter();
  counter.increment();
  expect(counter.getValue()).toBe(1);
});
```

###  Bad Practice: Props for testing and private access
```ts
// Bad: Adding unused optional props for testing
interface ComponentProps {
  userId: string;
  userName: string;
  testOnlyMockData?: any;
}

// Bad: Complex test with hacky private access
test('internal cache is updated', async () => {
  const service = new DataService();
  await service.fetchData();
  // Accessing private cache property directly
  expect(service['_cache'].size).toBe(5);
});
```

###  Good Practice: Clean props and behavior testing
```ts
// Good: Clean interface with only required props
interface ComponentProps {
  userId: string;
  userName: string;
}

// Good: Testing public behavior
test('data is cached after fetching', async () => {
  const service = new DataService();
  // First call should trigger fetch
  const result1 = await service.fetchData();
  // Mock the external API to verify cache is used
  mockApi.fetchData.mockRejectedValue(new Error('API unavailable'));
  // Should still work (using cache)
  const result2 = await service.fetchData();
  expect(result2).toEqual(result1);
});
```
