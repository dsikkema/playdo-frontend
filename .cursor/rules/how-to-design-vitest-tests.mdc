---
description: HOW to write Vitest tests
globs: *.test.tsx,*.test.ts,*.ts,*.tsx
alwaysApply: true
---
# Frontend Test Case Design

## Component Testing Approach
Focus on testing component interactions and behaviors, not implementation details:

- Mock child components to isolate the component under test
- Test parent-child interactions through props and callbacks
- Verify state changes reflect correctly in the UI
- Use data-testid attributes for test-specific element selection
- Tests should be COMPREHENSIVE and cover edge cases, not just the happy path.
- When there are a variable number of inputs or outputs (such as a list that may contain multiple messages, multiple
  users, a map with many key/value pairs, or etcetera), ALWAYS test the cases of zero, one, and many items. Test
  when the input or result is empty that the expected behavior occurs (even if a validation error is the expected
  result), and the same when there is only one item, or many items.
- When you are ready to write tests, think out loud about the possible edge cases, as they relate to null/empty conditions, the boundaries of loops, and
  the cyclomatic structure of the code being tested. Then write tests for any edge cases you can observe.

## Example of Proper Component Test

```tsx
import { render, screen } from '@testing-library/react'
import { describe, it, expect, vi } from 'vitest'
import userEvent from '@testing-library/user-event'
import { act } from 'react'
import ParentComponent from './ParentComponent'

// Mock child components to isolate the component under test
vi.mock('./ChildComponent', () => ({
  default: ({ onSelect, selectedId }: { onSelect: (id: number) => void, selectedId: number | null }) => (
    <div data-testid="child-component">
      <button
        onClick={() => onSelect(TEST_ITEM_ID)}
        data-testid="select-button"
      >
        Select Item
      </button>
      <div data-testid="selected-item-id">{selectedId}</div>
    </div>
  )
}))

// Constants for test values
const TEST_ITEM_ID = 42

describe('<ParentComponent />', () => {
  it('renders child components correctly', async () => {
    // Act
    await act(async () => {
      render(<ParentComponent />)
    })

    // Assert
    expect(screen.getByTestId('child-component')).toBeInTheDocument()
    expect(screen.getByTestId('content-display')).toBeInTheDocument()
  })

  it('updates state when child component triggers selection', async () => {
    // Arrange
    const user = userEvent.setup()

    // Act
    await act(async () => {
      render(<ParentComponent />)
    })

    // Initially no item is selected
    expect(screen.getByText('No item selected')).toBeInTheDocument()

    // Trigger selection in child component
    await user.click(screen.getByTestId('select-button'))

    // Assert
    expect(screen.getByText(`Viewing item ${TEST_ITEM_ID}`)).toBeInTheDocument()
    expect(screen.getByTestId('selected-item-id').textContent).toBe(TEST_ITEM_ID.toString())
  })
})
```
## Testing Best Practices

### Component Mocking
- Mock child components to focus on the component under test
- Use data-testid attributes for selections instead of relying on text content or DOM structure
- Implement minimal mock implementations that allow testing the parent-child interaction

### Test Structure
- Use the act() function from React to ensure all updates to your component (like state changes, effects, and DOM updates) are processed and applied before making assertions. This prevents test flakiness by ensuring React's rendering and update cycle completes before continuing with the test. Always wrap render() and state-changing operations in act().
- Use Arrange-Act-Assert pattern (also known as Given-When-Then)
- Add descriptive comments for each test phase
- Keep assertions focused on the specific behavior being tested

### Async Testing
- Use `async/await` with `userEvent` for interaction testing
- Verify initial state before interactions
- Verify state changes after interactions
- Use `waitFor` when dealing with async updates that don't happen immediately

### Avoiding Common Pitfalls
- NEVER EVER mock the very component or service that you are testing. Alert the user and ask for guidance dealing
  with difficult mocking situations if there are problems mocking something effectively.
- DO USE constants for test values rather than hardcoding them in multiple places. All literal test values should be
  in NAMED consts.
- Don't test implementation details, test behaviors
- Don't rely on internal component state, test what users see
- Add descriptive code comments explaining the testing approach, especially for complex mocking

### When you may skip tests
- ONLY when changing just css properties or html-only styling changes, you do not need tests.
