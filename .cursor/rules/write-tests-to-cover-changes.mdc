---
description: ALWAYS write Vitest tests for code changes
globs: *.tsx,*.ts
alwaysApply: true
---
# Frontend Tests

## When to write new tests, new test cases, or update existing test cases
When adding components, fixing bugs, or making any changes, ALWAYS write automated tests with Vitest that logically cover the change. Run tests to verify they pass using `npm run test`.

Test files should follow the naming convention:
- `ComponentName.test.tsx` for component tests
- `fileName.test.ts` for utility/service tests

A bug is NOT fixed until a test proves that it's fixed, that would have failed without fixing the bug.

## What to test
- Components: Test rendering, user interactions, and component state changes
- Services: Test API calls, data transformation, and error handling
- Utilities: Test pure functions and their edge cases
- Hooks: Test custom hooks with `@testing-library/react-hooks`

## Test case design
- Tests should be COMPREHENSIVE and cover edge cases, not just the happy path.
- When there are a variable number of inputs or outputs (such as a list that may contain multiple messages, multiple
  users, a map with many key/value pairs, or etcetera), ALWAYS test the cases of zero, one, and many items. Test
  when the input or result is empty that the expected behavior occurs (even if a validation error is the expected
  result), and the same when there is only one item, or many items.
- Think out loud about the possible edge cases, as they relate to null/empty conditions, the boundaries of loops, and
  the cyclomatic structure of the code being tested. Then write tests for any edge cases you can observe.
