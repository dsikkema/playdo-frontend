---
description: Writing Tests for Code Changes
globs:
alwaysApply: true
---
# Writing Tests for Code Changes

## Test Coverage Requirements

- **Always** write Vitest tests for new components, bug fixes, and feature changes
- A bug is NOT fixed until a test proves it's fixed
- Run tests with `npm run test` to verify they pass

## Test File Naming

- Component tests: `ComponentName.test.tsx`
- Utility/service tests: `fileName.test.ts`

## What to Test

- **Components**: Rendering, user interactions, state changes
- **Services**: API calls, data transformation, error handling
- **Utilities**: Pure functions and edge cases
- **Hooks**: Custom hooks with @testing-library/react-hooks

## Test Case Design

- NEVER mock the component being tested
- AVOID multiple mocks of the same component in different tests
- Tests should be COMPREHENSIVE, covering edge cases
- For collections/lists, test zero, one, and many items
- Consider boundary conditions, null/empty values, and error states
- Think through cyclomatic complexity when designing test cases
